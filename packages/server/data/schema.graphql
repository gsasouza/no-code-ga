"""Algorithm data"""
type Algorithm implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  user: User
  setup: Setup
  status: Status
  currentData: CurrentData
}

input AlgorithmAddInput {
  name: String!
  setup: SetupInputType!
  clientMutationId: String
}

type AlgorithmAddPayload {
  algorithmEdge: AlgorithmEdge
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type AlgorithmConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlgorithmEdge]
  count: Int
}

"""An edge in a connection."""
type AlgorithmEdge {
  """The item at the end of the edge"""
  node: Algorithm

  """A cursor for use in pagination"""
  cursor: String!
}

input AlgorithmStartInput {
  id: ID!
  clientMutationId: String
}

type AlgorithmStartPayload {
  algorithmEdge: AlgorithmEdge
  error: String
  clientMutationId: String
}

input AuthUserInput {
  token: String!
  clientMutationId: String
}

type AuthUserPayload {
  me: User
  token: String
  error: String
  clientMutationId: String
}

"""Current data"""
type CurrentData {
  bestFitness: Float
  population: String
}

input DataInputType {
  name: String!
  type: String!
}

type DataModel {
  name: String
  type: String
}

"""Log data"""
type Log implements Node {
  """The ID of an object"""
  id: ID!
  populationFitness: Float
  bestIndividual: String
  fitness: Float
}

"""A connection to a list of items."""
type LogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogEdge]
  count: Int
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge"""
  node: Log

  """A cursor for use in pagination"""
  cursor: String!
}

type LogNewPayload {
  logEdge: LogEdge
}

type Mutation {
  UserAuth(input: AuthUserInput!): AuthUserPayload
  AlgorithmAdd(input: AlgorithmAddInput!): AlgorithmAddPayload
  AlgorithmStart(input: AlgorithmStartInput!): AlgorithmStartPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  algorithms(after: String, first: Int, before: String, last: Int, search: String): AlgorithmConnection
  logs(after: String, first: Int, before: String, last: Int, algorithm: ID!): LogConnection
}

"""Setup data"""
type Setup {
  populationSize: Int
  generateFunction: String
  testFunction: String
  dataModel: [DataModel]
}

input SetupInputType {
  populationSize: Int!
  generateFunction: String!
  testFunction: String!
  dataModel: [DataInputType]!
}

"""Status data"""
type Status {
  isRunning: Boolean
}

type Subscription {
  LogNew: LogNewPayload
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  email: String
  profilePicture: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
